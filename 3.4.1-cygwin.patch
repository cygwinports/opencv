--- origsrc/opencv-3.4.1/modules/core/include/opencv2/core/utils/filesystem.private.hpp	2018-02-23 02:38:33.000000000 -0600
+++ src/opencv-3.4.1/modules/core/include/opencv2/core/utils/filesystem.private.hpp	2018-03-21 21:38:23.411682100 -0500
@@ -12,7 +12,7 @@
 #  elif defined WINRT
      /* not supported */
 #  elif defined __ANDROID__ || defined __linux__ || defined _WIN32 || \
-        defined __FreeBSD__ || defined __bsdi__
+        defined __FreeBSD__ || defined __bsdi__ || defined __CYGWIN__
 #      define OPENCV_HAVE_FILESYSTEM_SUPPORT 1
 #  elif defined(__APPLE__)
 #    include <TargetConditionals.h>
--- origsrc/opencv-3.4.1/modules/core/src/ocl_deprecated.hpp	2018-02-23 02:38:33.000000000 -0600
+++ src/opencv-3.4.1/modules/core/src/ocl_deprecated.hpp	2018-03-21 21:39:42.662337500 -0500
@@ -613,7 +613,7 @@ static void* initOpenCLAndLoad(const cha
     return funcname ? (void*)GetProcAddress(handle, funcname) : 0;
 }
 
-#elif defined(__linux) && defined(HAVE_OPENCL)
+#elif (defined(__linux) || defined(__CYGWIN__)) && defined(HAVE_OPENCL)
 
 #include <dlfcn.h>
 #include <stdio.h>
@@ -626,9 +626,13 @@ static void* initOpenCLAndLoad(const cha
     {
         if(!initialized)
         {
+#ifdef __CYGWIN__
+            handle = dlopen("cygOpenCL-1.dll", RTLD_LAZY);
+#else
             handle = dlopen("libOpenCL.so", RTLD_LAZY);
             if(!handle)
                 handle = dlopen("libCL.so", RTLD_LAZY);
+#endif
             initialized = true;
             g_haveOpenCL = handle != 0 && dlsym(handle, oclFuncToCheck) != 0;
         }
--- origsrc/opencv-3.4.1/modules/core/src/opencl/runtime/opencl_core.cpp	2018-02-23 02:38:33.000000000 -0600
+++ src/opencv-3.4.1/modules/core/src/opencl/runtime/opencl_core.cpp	2018-03-21 21:29:21.932797200 -0500
@@ -154,7 +154,7 @@ static void* WinGetProcAddress(const cha
 #define CV_CL_GET_PROC_ADDRESS(name) WinGetProcAddress(name)
 #endif // _WIN32
 
-#if defined(__linux__)
+#if defined(__linux__) || defined(__CYGWIN__)
 #include <dlfcn.h>
 #include <stdio.h>
 
@@ -185,7 +185,11 @@ static void* GetProcAddress(const char*
         cv::AutoLock lock(cv::getInitializationMutex());
         if (!initialized)
         {
+#ifdef __CYGWIN__
+            const char* defaultPath = "cygOpenCL-1.dll";
+#else
             const char* defaultPath = "libOpenCL.so";
+#endif
             const char* path = getRuntimePath(defaultPath);
             if (path)
             {
--- origsrc/opencv-3.4.1/modules/core/src/opengl.cpp	2018-02-23 02:38:33.000000000 -0600
+++ src/opencv-3.4.1/modules/core/src/opengl.cpp	2018-03-21 21:41:02.012894600 -0500
@@ -1581,7 +1581,7 @@ void cv::ogl::render(const ogl::Arrays&
 #if defined(HAVE_OPENGL)
 #  if defined(__ANDROID__)
 #    include <EGL/egl.h>
-#  elif defined(__linux__)
+#  elif defined(__linux__) || defined(__CYGWIN__)
 #    include <GL/glx.h>
 #  endif
 #endif // HAVE_OPENGL
@@ -1652,7 +1652,7 @@ Context& initializeContextFromGL()
             CL_CONTEXT_PLATFORM, (cl_context_properties)platforms[i],
             CL_GL_CONTEXT_KHR, (cl_context_properties)eglGetCurrentContext(),
             CL_EGL_DISPLAY_KHR, (cl_context_properties)eglGetCurrentDisplay(),
-#elif defined(__linux__)
+#elif defined(__linux__) || defined(__CYGWIN__)
             CL_CONTEXT_PLATFORM, (cl_context_properties)platforms[i],
             CL_GL_CONTEXT_KHR, (cl_context_properties)glXGetCurrentContext(),
             CL_GLX_DISPLAY_KHR, (cl_context_properties)glXGetCurrentDisplay(),
--- origsrc/opencv-3.4.1/modules/core/src/parallel.cpp	2018-02-23 02:38:33.000000000 -0600
+++ src/opencv-3.4.1/modules/core/src/parallel.cpp	2018-03-21 21:29:56.856064900 -0500
@@ -53,7 +53,7 @@
     #undef abs
 #endif
 
-#if defined __linux__ || defined __APPLE__ || defined __GLIBC__
+#if defined __linux__ || defined __APPLE__ || defined __GLIBC__ || defined __CYGWIN__
     #include <unistd.h>
     #include <stdio.h>
     #include <sys/types.h>
@@ -721,7 +721,7 @@ int cv::getNumberOfCPUs(void)
 #elif defined __ANDROID__
     static int ncpus = getNumberOfCPUsImpl();
     return ncpus;
-#elif defined __linux__ || defined __GLIBC__
+#elif defined __linux__ || defined __GLIBC__ || defined __CYGWIN__
     return (int)sysconf( _SC_NPROCESSORS_ONLN );
 #elif defined __APPLE__
     int numCPU=0;
--- origsrc/opencv-3.4.1/modules/core/src/system.cpp	2018-02-23 02:38:33.000000000 -0600
+++ src/opencv-3.4.1/modules/core/src/system.cpp	2018-03-21 21:37:31.811007300 -0500
@@ -67,7 +67,7 @@ Mutex* __initialization_mutex_initialize
 # endif
 #endif
 
-#if defined __ANDROID__ || defined __linux__ || defined __FreeBSD__ || defined __HAIKU__
+#if defined __ANDROID__ || defined __linux__ || defined __FreeBSD__ || defined __HAIKU__ || defined __CYGWIN__
 #  include <unistd.h>
 #  include <fcntl.h>
 #  include <elf.h>
@@ -633,7 +633,7 @@ int64 getTickCount(void)
     LARGE_INTEGER counter;
     QueryPerformanceCounter( &counter );
     return (int64)counter.QuadPart;
-#elif defined __linux || defined __linux__
+#elif defined __linux || defined __linux__ || defined __CYGWIN__
     struct timespec tp;
     clock_gettime(CLOCK_MONOTONIC, &tp);
     return (int64)tp.tv_sec*1000000000 + tp.tv_nsec;
@@ -653,7 +653,7 @@ double getTickFrequency(void)
     LARGE_INTEGER freq;
     QueryPerformanceFrequency(&freq);
     return (double)freq.QuadPart;
-#elif defined __linux || defined __linux__
+#elif defined __linux || defined __linux__ || defined __CYGWIN__
     return 1e9;
 #elif defined __MACH__ && defined __APPLE__
     static double freq = 0;
--- origsrc/opencv-3.4.1/modules/core/src/utils/filesystem.cpp	2018-02-23 02:38:33.000000000 -0600
+++ src/opencv-3.4.1/modules/core/src/utils/filesystem.cpp	2018-03-21 21:41:55.922205400 -0500
@@ -34,7 +34,7 @@
 #include <errno.h>
 #include <io.h>
 #include <stdio.h>
-#elif defined __linux__ || defined __APPLE__
+#elif defined __linux__ || defined __APPLE__ || defined __CYGWIN__
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <fcntl.h>
@@ -161,7 +161,7 @@ cv::String getcwd()
     sz = GetCurrentDirectoryA((DWORD)buf.size(), (char*)buf);
     return cv::String((char*)buf, (size_t)sz);
 #endif
-#elif defined __linux__ || defined __APPLE__
+#elif defined __linux__ || defined __APPLE__ || defined __CYGWIN__
     for(;;)
     {
         char* p = ::getcwd((char*)buf, buf.size());
@@ -195,7 +195,7 @@ bool createDirectory(const cv::String& p
 #else
     int result = _mkdir(path.c_str());
 #endif
-#elif defined __linux__ || defined __APPLE__
+#elif defined __linux__ || defined __APPLE__ || defined __CYGWIN__
     int result = mkdir(path.c_str(), 0777);
 #else
     int result = -1;
@@ -310,7 +310,7 @@ private:
     Impl& operator=(const Impl&); // disabled
 };
 
-#elif defined __linux__ || defined __APPLE__
+#elif defined __linux__ || defined __APPLE__ || defined __CYGWIN__
 
 struct FileLock::Impl
 {
@@ -424,7 +424,7 @@ cv::String getCacheDirectory(const char*
             default_cache_path = "/tmp/";
             CV_LOG_WARNING(NULL, "Using world accessible cache directory. This may be not secure: " << default_cache_path);
         }
-#elif defined __linux__
+#elif defined __linux__ || defined __CYGWIN__
         // https://specifications.freedesktop.org/basedir-spec/basedir-spec-latest.html
         if (default_cache_path.empty())
         {
--- origsrc/opencv-3.4.1/modules/objdetect/include/opencv2/objdetect/detection_based_tracker.hpp	2018-02-23 02:38:33.000000000 -0600
+++ src/opencv-3.4.1/modules/objdetect/include/opencv2/objdetect/detection_based_tracker.hpp	2018-03-21 21:42:24.142479800 -0500
@@ -47,7 +47,7 @@
 #include <opencv2/core.hpp>
 
 // After this condition removal update blacklist for bindings: modules/python/common.cmake
-#if defined(__linux__) || defined(LINUX) || defined(__APPLE__) || defined(__ANDROID__) || \
+#if defined(__linux__) || defined(LINUX) || defined(__APPLE__) || defined(__ANDROID__) || defined(__CYGWIN__) || \
   defined(CV_CXX11)
 
 #include <vector>
--- origsrc/opencv-3.4.1/modules/objdetect/src/detection_based_tracker.cpp	2018-02-23 02:38:33.000000000 -0600
+++ src/opencv-3.4.1/modules/objdetect/src/detection_based_tracker.cpp	2018-03-21 21:42:47.594164000 -0500
@@ -48,7 +48,7 @@
 #define USE_STD_THREADS
 #endif
 
-#if defined(__linux__) || defined(LINUX) || defined(__APPLE__) || defined(__ANDROID__) || defined(USE_STD_THREADS)
+#if defined(__linux__) || defined(LINUX) || defined(__APPLE__) || defined(__ANDROID__) || defined(__CYGWIN__) || defined(USE_STD_THREADS)
 
 #include "opencv2/core/utility.hpp"
 
--- origsrc/opencv-3.4.1/modules/videoio/src/cap_ffmpeg_impl.hpp	2018-02-23 02:38:33.000000000 -0600
+++ src/opencv-3.4.1/modules/videoio/src/cap_ffmpeg_impl.hpp	2018-03-21 21:44:15.536370300 -0500
@@ -101,7 +101,7 @@ extern "C" {
         long   tv_nsec;
     };
   #endif
-#elif defined __linux__ || defined __APPLE__
+#elif defined __linux__ || defined __APPLE__ || defined __CYGWIN__
     #include <unistd.h>
     #include <stdio.h>
     #include <sys/types.h>
@@ -298,7 +298,7 @@ static int get_number_of_cpus(void)
     GetSystemInfo( &sysinfo );
 
     return (int)sysinfo.dwNumberOfProcessors;
-#elif defined __linux__
+#elif defined __linux__ || defined __CYGWIN__
     return (int)sysconf( _SC_NPROCESSORS_ONLN );
 #elif defined __APPLE__
     int numCPU=0;
@@ -661,7 +661,7 @@ struct ImplMutex::Impl
     int refcount;
 };
 
-#elif defined __linux__ && !defined __ANDROID__
+#elif defined __linux__ && !defined __ANDROID__ || defined __CYGWIN__
 
 struct ImplMutex::Impl
 {
